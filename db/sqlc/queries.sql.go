// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getNumberOfIncidents = `-- name: GetNumberOfIncidents :many
SELECT id, user_id FROM incident WHERE created_at >= NOW() - INTERVAL ? MINUTE
`

type GetNumberOfIncidentsRow struct {
	ID     int64         `json:"id"`
	UserID sql.NullInt64 `json:"user_id"`
}

func (q *Queries) GetNumberOfIncidents(ctx context.Context, dateSUB interface{}) ([]GetNumberOfIncidentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getNumberOfIncidents, dateSUB)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNumberOfIncidentsRow
	for rows.Next() {
		var i GetNumberOfIncidentsRow
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT power_id, latitude, longitude
from users where id = ? LIMIT 1
`

type GetUserRow struct {
	PowerID   int32   `json:"power_id"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.PowerID, &i.Latitude, &i.Longitude)
	return i, err
}

const getUserByPowerId = `-- name: GetUserByPowerId :one
SELECT id, latitude, longitude
from users
where power_id = ? LIMIT 1
`

type GetUserByPowerIdRow struct {
	ID        int64   `json:"id"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (q *Queries) GetUserByPowerId(ctx context.Context, powerID int32) (GetUserByPowerIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPowerId, powerID)
	var i GetUserByPowerIdRow
	err := row.Scan(&i.ID, &i.Latitude, &i.Longitude)
	return i, err
}

const listIncidents = `-- name: ListIncidents :many



SELECT id, user_id, created_at, updated_at FROM incident
`

// noinspection SqlDialectInspectionForFile
// noinspection SqlNoDataSourceInspectionForFile
func (q *Queries) ListIncidents(ctx context.Context) ([]Incident, error) {
	rows, err := q.db.QueryContext(ctx, listIncidents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Incident
	for rows.Next() {
		var i Incident
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, power_id, latitude, longitude, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PowerID,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
